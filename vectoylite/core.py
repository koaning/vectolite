"""This is a single notebook that contains all the source code, yay!"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['serialize_f32', 'VectoyLite']

# %% ../nbs/00_core.ipynb 3
from nbdev.showdoc import *
from fastcore.basics import patch
import json
from diskcache import Cache
import hashlib
import orjson
import sqlite_vec
import pysqlite3
from typing import Dict

from typing import List
import struct


def serialize_f32(vector: List[float]) -> bytes:
    """Serializes a list of floats into a compact "raw bytes" format."""
    return struct.pack("%sf" % len(vector), *vector)

# %% ../nbs/00_core.ipynb 4
class VectoyLite:
    def __init__(self, path: str):
        """
        Initializes the VectoLite instance with a connection to the SQLite database.

        Parameters
        ----------
            path 
                The path to the SQLite database file.
        """
        self.path = path
        self.db = pysqlite3.connect(f'{path}.sqlite')
        self.db.enable_load_extension(True)
        sqlite_vec.load(self.db)
        self.db.enable_load_extension(False)
        self.cache = Cache(path)
        self.rownums = None
        self.table_name = 'myvecs'

    def __len__(self):
        """
        Returns the number of rows in the specified table. Will also cache the number of rows internally when called.

        Returns
        -------
        int
            The number of rows in the table.
        """
        if not self.rownums:
            self.rownums = self.db.execute(f"SELECT COUNT(*) FROM {self.table_name}").fetchone()[0]
        return self.rownums

    @property
    def table_exists(self) -> bool:
        """
        Checks if a table exists in the SQLite database.

        Returns
        -------
        bool
            True if the table exists, False otherwise.
        """
        return self.db.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{self.table_name}'").fetchone() is not None
